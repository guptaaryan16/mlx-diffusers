# This file is autogenerated by the command `make fix-copies`, do not edit.
from ..utils import DummyObject, requires_backends


class MLXModelMixin(metaclass=DummyObject):
    _backends = ["mlx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["mlx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["mlx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["mlx"])


class MLXUNet2DConditionModel(metaclass=DummyObject):
    _backends = ["mlx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["mlx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["mlx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["mlx"])


class MLXAutoencoderKL(metaclass=DummyObject):
    _backends = ["mlx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["mlx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["mlx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["mlx"])


class MLXDiffusionPipeline(metaclass=DummyObject):
    _backends = ["mlx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["mlx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["mlx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["mlx"])


class MLXDDIMScheduler(metaclass=DummyObject):
    _backends = ["mlx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["mlx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["mlx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["mlx"])


class MLXDDPMScheduler(metaclass=DummyObject):
    _backends = ["mlx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["mlx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["mlx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["mlx"])


class MLXSchedulerMixin(metaclass=DummyObject):
    _backends = ["mlx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["mlx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["mlx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["mlx"])

